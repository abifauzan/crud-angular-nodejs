{"version":3,"file":"web_animations_style_normalizer.js","sources":["../../../../../../modules/@angular/animation/src/dsl/style_normalization/web_animations_style_normalizer.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,OAAO,EAAA,wBAAE,EAAwB,MAAA,8BAAA,CAAA;AACjC;AAAwD,IACvD,gDAAA;AAAC,IADF;AAA0C;AAGnC,IA+BP,CAAC;AACD,IAlCA;AACA;AACI;AACI;AAEA,OADL;AACH,IAAA,4DAJG,GAIH,UAJG,YAAA,EAAA,MAAA;AAAI,QAKH,MAAM,CAJC,mBAAA,CAAoB,YAAC,CAAY,CAAC;AAGvC,IAEJ,CAAC;AACF,IAAD;AACA;AACI;AACI;AACI;AAEX;AACe,OADb;AACH,IAAA,0DAVG,GAUH,UACM,oBAA4B,EAAE,kBAA0B,EAAE,KAAoB,EAC9E,MAAgB;AAAI,QACtB,IAAI,gBAAgB,CAVhB,IAAA,GAAe,EAAA,CAAG;AACH,QAUnB,IAAM,gBAAgB,CAVhB,MAAA,GAAS,KAAA,CAAM,QAAC,EAAQ,CAAE,IAAC,EAAI,CAAE;AAClC,QAWL,EAAE,CAAC,CAAC,oBAVC,CAAoB,kBAAC,CAAkB,IAAI,KAAA,KAAU,CAAA,IAAK,KAAA,KAAU,GAAA,CAAI,CAAC,CAAA;AAKhF,YAMI,EAAE,CAAC,CAAC,OAVO,KAAA,KAAU,QAAA,CAAS,CAAC,CAAA;AAEnC,gBASM,IAAI,GAVG,IAAA,CAAK;AAElB,YASI,CAAC;AAAC,YAVA,IAAA,CAAK,CAAA;AACH,gBAUF,IAAM,gBAAgB,CAVhB,iBAAA,GAAoB,KAAA,CAAM,KAAC,CAAK,wBAAC,CAAwB,CAAC;AACpB,gBAU5C,EAAE,CAAC,CAAC,iBAVC,IAAoB,iBAAA,CAAkB,CAAC,CAAC,CAAC,MAAC,IAAS,CAAA,CAAE,CAAC,CAAA;AAAC,oBAW1D,MAAM,CAVC,IAAC,CAAI,yCAAC,oBAAuC,SAAoB,KAAS,CAAE,CAAC;AAE7E,gBAST,CAAC;AACT,YAAM,CAAC;AACP,QAAI,CAAC;AACL,QAAI,MAAM,CAVC,MAAA,GAAS,IAAA,CAAK;AAAC,IAWxB,CAAC;;;2GACH;AAAC,IAAD,mCAAC;AAAD,CAlCA,AAkCC,CAjCA,wBAAA,GAiCA;AACD;AACA,IAAM,gBAAgB,CAVhB,oBAAA,GAAuB,cAAA,CAWzB,oTAAoT;AACxT,KAAS,KAVC,CAAK,GAAC,CAAG,CAAC,CAAC;AAWrB;AACA;AACA;AACA,GAAG;AACH,wBAbC,IAAA;AAAI,IAcH,IAAM,gBAAgB,CAbhB,GAAA,GAAgC,EAAA,CAAG;AAKtC,IASH,IAAI,CAbC,OAAC,CAAO,UAAA,GAAC,IAAM,OAAA,GAAA,CAAI,GAAC,CAAG,GAAG,IAAA,EAAX,CAAW,CAAK,CAAC;AAIhC,IAUL,MAAM,CAbC,GAAA,CAAI;AAcb,CAAC;AAED,IAAM,gBAAgB,CAbhB,gBAAA,GAAmB,eAAA,CAAgB;AAczC;AACA;AACA;AACA,GAAG;AACH,MAjBC,8BAAA,KAAA;AAAI,IAkBH,MAAM,CAjBC,KAAA,CAAM,OAAC,CAAO,gBAAC,EAAiB;AAG/B,QAH+B,WAAW;AAG5C,aAHiC,UAAW,EAAX,qBAAW,EAAX,IAAW;AAGzC,YAH8B,sBAAW;AAG5C;AACL,QAJuD,OAAA,CAAA,CAAE,CAAC,CAAC,CAAC,WAAC,EAAW;AAK9D,IAL6C,CAAiB,CAAE,CAAC;AAkB9E,CAAC;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationStyleNormalizer} from './animation_style_normalizer';\nexport class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n/**\n * @param {?} propertyName\n * @param {?} errors\n * @return {?}\n */\nnormalizePropertyName(propertyName: string, errors: string[]): string {\n    return dashCaseToCamelCase(propertyName);\n  }\n/**\n * @param {?} userProvidedProperty\n * @param {?} normalizedProperty\n * @param {?} value\n * @param {?} errors\n * @return {?}\n */\nnormalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    let /** @type {?} */ unit: string = '';\n    const /** @type {?} */ strVal = value.toString().trim();\n\n    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n      if (typeof value === 'number') {\n        unit = 'px';\n      } else {\n        const /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n        }\n      }\n    }\n    return strVal + unit;\n  }\n}\n\nconst /** @type {?} */ DIMENSIONAL_PROP_MAP = makeBooleanMap(\n    'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'\n        .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys: string[]): {[key: string]: boolean} {\n  const /** @type {?} */ map: {[key: string]: boolean} = {};\n  keys.forEach(key => map[key] = true);\n  return map;\n}\n\nconst /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: any[]) => m[1].toUpperCase());\n}\n"]}